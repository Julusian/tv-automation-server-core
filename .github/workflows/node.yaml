name: Node CI

on:
  push:
    branches:
      - '**'

jobs:
  # lint:
  #   name: Typecheck and Lint
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   timeout-minutes: 15
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install meteor
  #     run: curl "https://install.meteor.com/?release=1.11.1" | sh
  #   - name: restore node_modules
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         meteor/node_modules
  #       key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
  #   - name: Run typecheck and linter
  #     run: |
  #       cd meteor
  #       meteor npm install
  #       meteor npm run ci:lint
  #     env:
  #       CI: true
  # test:
  #   name: Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install meteor
  #     run: curl "https://install.meteor.com/?release=1.11.1" | sh
  #   - name: restore node_modules
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         meteor/node_modules
  #       key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
  #   - name: Run tests
  #     run: |
  #       cd meteor
  #       meteor npm install
  #       meteor npm run prepareForTest
  #       meteor npm run ci
  #     env:
  #       CI: true

  # validate-prod-dependencies:
  #   name: Validate production dependencies
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   timeout-minutes: 15
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install meteor
  #     run: curl "https://install.meteor.com/?release=1.11.1" | sh
  #   - name: restore node_modules
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         meteor/node_modules
  #       key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
  #   - name: Validate production dependencies for vulnerabilities and compatible licenses
  #     run: |
  #       cd meteor
  #       meteor npm install
  #       meteor npm run validate:prod-dependencies
  #     env:
  #       CI: true
  # validate-all-dependencies:
  #   name: Validate all dependencies
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   timeout-minutes: 15
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install meteor
  #     run: curl "https://install.meteor.com/?release=1.11.1" | sh
  #   - name: restore node_modules
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         meteor/node_modules
  #       key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
  #   - name: Validate all dependencies for vulnerabilities
  #     run: |
  #       cd meteor
  #       meteor npm install
  #       meteor npm run validate:all-dependencies
  #     env:
  #       CI: true
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    # - name: Install meteor
    #   run: curl "https://install.meteor.com/?release=1.11.1" | sh
    # - name: restore node_modules
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       meteor/node_modules
    #     key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
    # - name: Meteor Build
    #   run: |
    #     cd meteor
    #     meteor npm install
    #     NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
    # - name: Meteor Bundle NPM Build
    #   run: |
    #     cd meteor/bundle/programs/server
    #     meteor npm install
    # - name: Upload artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: server-bundle
    #     path: |
    #       meteor/bundle
    #       Dockerfile.circle
    - name: Determine images to publish
      id: image-tags
      run: |
        USE_DOCKERHUB=$([[ ! -z "${{ secrets.DOCKERHUB_TOKEN }}" ]] && echo "1")
        IMAGES="test1/thingy:latest test2/another:latest"
        echo ::set-output name=images::"$IMAGES"
        echo ::set-output name=use-dockerhub::"$USE_DOCKERHUB"
    - name: Test use images
      if: ${{ steps.image-tags.outputs.images }}
      run: echo "${{ steps.image-tags.outputs.images }}"

    - name: Set up Docker Buildx
      if: ${{ steps.image-tags.outputs.images }}
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: ${{ steps.image-tags.outputs.images }} && ${{ steps.image-tags.outputs.use-dockerhub }}
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v1 
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_owner }}
    #     password: ${{ secrets.CR_PAT }}
    - name: Build and push
      uses: docker/build-push-action@v2
      if: ${{ steps.image-tags.outputs.images }}
      with:
        context: .
        file: ./Dockerfile.circle
        push: true
        tags: ${{ steps.image-tags.outputs.images }}

  